{"ast":null,"code":"/**\n * Environment - Manages variable scopes and values\n */\n\nclass Environment {\n  constructor(enclosing = null) {\n    this.values = new Map();\n    this.enclosing = enclosing; // Reference to the outer environment (scope)\n  }\n\n  // Define a new variable in the current scope\n  define(name, value) {\n    this.values.set(name.lexeme, value);\n    return value;\n  }\n\n  // Look up a variable by name\n  get(name) {\n    if (this.values.has(name.lexeme)) {\n      return this.values.get(name.lexeme);\n    }\n\n    // If variable not found in this scope, check the enclosing scope\n    if (this.enclosing) {\n      return this.enclosing.get(name);\n    }\n    throw new Error(`Undefined variable '${name.lexeme}'.`);\n  }\n\n  // Update an existing variable's value\n  assign(name, value) {\n    if (this.values.has(name.lexeme)) {\n      this.values.set(name.lexeme, value);\n      return value;\n    }\n\n    // If variable not found in this scope, try the enclosing scope\n    if (this.enclosing) {\n      return this.enclosing.assign(name, value);\n    }\n    throw new Error(`Undefined variable '${name.lexeme}'.`);\n  }\n}\nexport { Environment };","map":{"version":3,"names":["Environment","constructor","enclosing","values","Map","define","name","value","set","lexeme","get","has","Error","assign"],"sources":["/Users/senzenn/Documents/pbl-compiler/src/compiler/environment.js"],"sourcesContent":["/**\n * Environment - Manages variable scopes and values\n */\n\nclass Environment {\n  constructor(enclosing = null) {\n    this.values = new Map();\n    this.enclosing = enclosing; // Reference to the outer environment (scope)\n  }\n  \n  // Define a new variable in the current scope\n  define(name, value) {\n    this.values.set(name.lexeme, value);\n    return value;\n  }\n  \n  // Look up a variable by name\n  get(name) {\n    if (this.values.has(name.lexeme)) {\n      return this.values.get(name.lexeme);\n    }\n    \n    // If variable not found in this scope, check the enclosing scope\n    if (this.enclosing) {\n      return this.enclosing.get(name);\n    }\n    \n    throw new Error(`Undefined variable '${name.lexeme}'.`);\n  }\n  \n  // Update an existing variable's value\n  assign(name, value) {\n    if (this.values.has(name.lexeme)) {\n      this.values.set(name.lexeme, value);\n      return value;\n    }\n    \n    // If variable not found in this scope, try the enclosing scope\n    if (this.enclosing) {\n      return this.enclosing.assign(name, value);\n    }\n    \n    throw new Error(`Undefined variable '${name.lexeme}'.`);\n  }\n}\n\nexport { Environment }; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAC;EAChBC,WAAWA,CAACC,SAAS,GAAG,IAAI,EAAE;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB,IAAI,CAACF,SAAS,GAAGA,SAAS,CAAC,CAAC;EAC9B;;EAEA;EACAG,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAClB,IAAI,CAACJ,MAAM,CAACK,GAAG,CAACF,IAAI,CAACG,MAAM,EAAEF,KAAK,CAAC;IACnC,OAAOA,KAAK;EACd;;EAEA;EACAG,GAAGA,CAACJ,IAAI,EAAE;IACR,IAAI,IAAI,CAACH,MAAM,CAACQ,GAAG,CAACL,IAAI,CAACG,MAAM,CAAC,EAAE;MAChC,OAAO,IAAI,CAACN,MAAM,CAACO,GAAG,CAACJ,IAAI,CAACG,MAAM,CAAC;IACrC;;IAEA;IACA,IAAI,IAAI,CAACP,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS,CAACQ,GAAG,CAACJ,IAAI,CAAC;IACjC;IAEA,MAAM,IAAIM,KAAK,CAAC,uBAAuBN,IAAI,CAACG,MAAM,IAAI,CAAC;EACzD;;EAEA;EACAI,MAAMA,CAACP,IAAI,EAAEC,KAAK,EAAE;IAClB,IAAI,IAAI,CAACJ,MAAM,CAACQ,GAAG,CAACL,IAAI,CAACG,MAAM,CAAC,EAAE;MAChC,IAAI,CAACN,MAAM,CAACK,GAAG,CAACF,IAAI,CAACG,MAAM,EAAEF,KAAK,CAAC;MACnC,OAAOA,KAAK;IACd;;IAEA;IACA,IAAI,IAAI,CAACL,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS,CAACW,MAAM,CAACP,IAAI,EAAEC,KAAK,CAAC;IAC3C;IAEA,MAAM,IAAIK,KAAK,CAAC,uBAAuBN,IAAI,CAACG,MAAM,IAAI,CAAC;EACzD;AACF;AAEA,SAAST,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}