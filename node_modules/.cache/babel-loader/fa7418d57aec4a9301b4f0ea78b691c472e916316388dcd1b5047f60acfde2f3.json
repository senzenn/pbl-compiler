{"ast":null,"code":"/**\n * Interpreter - Executes the AST\n * This is a simplified version for the web demo\n */\n\nimport { Environment } from './environment';\nclass Interpreter {\n  constructor() {\n    this.environment = new Environment();\n    this.result = null;\n  }\n  interpret(statements) {\n    try {\n      // Execute each statement in the program\n      for (const statement of statements) {\n        this.execute(statement);\n      }\n      return this.result;\n    } catch (error) {\n      console.error(\"Runtime error:\", error);\n      throw error;\n    }\n  }\n  execute(statement) {\n    // This is a simplified interpreter that just tracks token types\n    // A full implementation would properly execute the code\n\n    if (statement.token) {\n      // For the demo, we'll just store token information\n      this.environment.define({\n        lexeme: `var_${statement.token.lexeme}`\n      }, statement.token.literal || statement.token.lexeme);\n    }\n    this.result = \"Program executed successfully\";\n    return null;\n  }\n}\nexport { Interpreter };","map":{"version":3,"names":["Environment","Interpreter","constructor","environment","result","interpret","statements","statement","execute","error","console","token","define","lexeme","literal"],"sources":["/Users/senzenn/Documents/pbl-compiler/src/compiler/interpreter.js"],"sourcesContent":["/**\n * Interpreter - Executes the AST\n * This is a simplified version for the web demo\n */\n\nimport { Environment } from './environment';\n\nclass Interpreter {\n  constructor() {\n    this.environment = new Environment();\n    this.result = null;\n  }\n  \n  interpret(statements) {\n    try {\n      // Execute each statement in the program\n      for (const statement of statements) {\n        this.execute(statement);\n      }\n      \n      return this.result;\n    } catch (error) {\n      console.error(\"Runtime error:\", error);\n      throw error;\n    }\n  }\n  \n  execute(statement) {\n    // This is a simplified interpreter that just tracks token types\n    // A full implementation would properly execute the code\n    \n    if (statement.token) {\n      // For the demo, we'll just store token information\n      this.environment.define(\n        { lexeme: `var_${statement.token.lexeme}` },\n        statement.token.literal || statement.token.lexeme\n      );\n    }\n    \n    this.result = \"Program executed successfully\";\n    return null;\n  }\n}\n\nexport { Interpreter }; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,eAAe;AAE3C,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAIH,WAAW,CAAC,CAAC;IACpC,IAAI,CAACI,MAAM,GAAG,IAAI;EACpB;EAEAC,SAASA,CAACC,UAAU,EAAE;IACpB,IAAI;MACF;MACA,KAAK,MAAMC,SAAS,IAAID,UAAU,EAAE;QAClC,IAAI,CAACE,OAAO,CAACD,SAAS,CAAC;MACzB;MAEA,OAAO,IAAI,CAACH,MAAM;IACpB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACb;EACF;EAEAD,OAAOA,CAACD,SAAS,EAAE;IACjB;IACA;;IAEA,IAAIA,SAAS,CAACI,KAAK,EAAE;MACnB;MACA,IAAI,CAACR,WAAW,CAACS,MAAM,CACrB;QAAEC,MAAM,EAAE,OAAON,SAAS,CAACI,KAAK,CAACE,MAAM;MAAG,CAAC,EAC3CN,SAAS,CAACI,KAAK,CAACG,OAAO,IAAIP,SAAS,CAACI,KAAK,CAACE,MAC7C,CAAC;IACH;IAEA,IAAI,CAACT,MAAM,GAAG,+BAA+B;IAC7C,OAAO,IAAI;EACb;AACF;AAEA,SAASH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}