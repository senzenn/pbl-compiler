{"ast":null,"code":"var _jsxFileName = \"/Users/senzenn/Documents/pbl-compiler/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CodeEditor from './components/CodeEditor';\nimport OutputPanel from './components/OutputPanel';\nimport Header from './components/Header';\nimport './App.css';\nimport { Tokenizer } from './compiler/tokenizer';\nimport { Parser } from './compiler/parser';\nimport { Interpreter } from './compiler/interpreter';\nimport { EnvironmentMonitor } from './compiler/environment-monitor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCode = `// Example program for the Mini JavaScript Engine\n\n// Variable declarations\nlet x = 10;\nlet y = 5;\n\n// Arithmetic expressions\nlet sum = x + y;\nlet diff = x - y;\nlet product = x * y;\nlet quotient = x / y;\n\n// Logical conditions\nlet isGreater = x > y;\n\n// Conditional statements\nif (isGreater) {\n  // This block should execute\n  sum = sum * 2;\n}\n\n// Variable assignment\nx = sum; \n\n// End of program`;\nfunction App() {\n  _s();\n  const [code, setCode] = useState(defaultCode);\n  const [activeTab, setActiveTab] = useState('output');\n  const [results, setResults] = useState({\n    output: '// Run your code to see output',\n    tokens: '// Run your code to see tokens',\n    ast: '// Run your code to see AST',\n    environment: '// Run your code to see environment variables',\n    error: null\n  });\n  const handleCodeChange = value => {\n    setCode(value);\n  };\n  const handleRunCode = () => {\n    try {\n      var _result$output, _result$ast;\n      const engine = new MiniJSEngine();\n      const result = engine.run(code);\n      setResults({\n        output: (_result$output = result.output) !== null && _result$output !== void 0 ? _result$output : 'Code executed successfully!',\n        tokens: formatTokens(result.tokens),\n        ast: (_result$ast = result.ast) !== null && _result$ast !== void 0 ? _result$ast : 'No AST generated',\n        environment: formatEnvironment(result.environment),\n        error: result.error\n      });\n    } catch (error) {\n      setResults({\n        ...results,\n        output: `System Error: ${error.message}`,\n        error: error.message\n      });\n    }\n  };\n  const formatTokens = tokens => {\n    if (!tokens || tokens.length === 0) {\n      return 'No tokens generated';\n    }\n    let result = '';\n    tokens.forEach((token, index) => {\n      result += `[${index}] ${token.type}: \"${token.lexeme}\" (Line ${token.line})\\n`;\n    });\n    return result;\n  };\n  const formatEnvironment = env => {\n    if (!env) {\n      return '// No environment data available';\n    }\n    if (env.error) {\n      return `// Error: ${env.error}`;\n    }\n    let envText = '';\n\n    // Recursive function to display environment chain\n    function addEnvironmentToText(env, indentLevel = 0) {\n      if (!env) return;\n      const indent = '  '.repeat(indentLevel);\n      envText += `${indent}${env.name}:\\n`;\n\n      // Add variables\n      const variables = env.variables || {};\n      for (const [name, value] of Object.entries(variables)) {\n        envText += `${indent}  ${name}: ${value}\\n`;\n      }\n\n      // Process enclosing environment\n      if (env.enclosing) {\n        envText += '\\n';\n        addEnvironmentToText(env.enclosing, indentLevel + 1);\n      }\n    }\n    addEnvironmentToText(env);\n    return envText;\n  };\n\n  // Mini JS Engine class adapted for web use\n  class MiniJSEngine {\n    constructor() {\n      this.interpreter = new Interpreter();\n      this.environmentMonitor = new EnvironmentMonitor(this.interpreter);\n      this.results = {\n        tokens: [],\n        ast: null,\n        output: null,\n        error: null,\n        environment: null\n      };\n    }\n    run(source) {\n      try {\n        // Reset results\n        this.results = {\n          tokens: [],\n          ast: null,\n          output: null,\n          error: null,\n          environment: null\n        };\n\n        // Tokenization\n        const tokenizer = new Tokenizer(source);\n        const tokens = tokenizer.tokenize();\n        this.results.tokens = tokens;\n\n        // Parsing\n        const parser = new Parser(tokens);\n        const statements = parser.parse();\n        this.results.ast = JSON.stringify(statements, this.astReplacer, 2);\n\n        // Interpretation\n        const result = this.interpreter.interpret(statements);\n        this.results.output = result;\n\n        // Extract environment information\n        this.results.environment = this.environmentMonitor.extractEnvironment();\n        return this.results;\n      } catch (error) {\n        this.results.error = error.message;\n        return this.results;\n      }\n    }\n\n    // Helper method to handle circular references in AST\n    astReplacer(key, value) {\n      if (key === 'parent' || key === 'previous') {\n        return undefined; // Skip circular references\n      }\n      return value;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onRun: handleRunCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        code: code,\n        onChange: handleCodeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OutputPanel, {\n        results: results,\n        activeTab: activeTab,\n        onTabChange: setActiveTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Mini JavaScript Engine \\xA9 2023\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cuuUnWMKkncjXXPMy+cwsf7yy3k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CodeEditor","OutputPanel","Header","Tokenizer","Parser","Interpreter","EnvironmentMonitor","jsxDEV","_jsxDEV","defaultCode","App","_s","code","setCode","activeTab","setActiveTab","results","setResults","output","tokens","ast","environment","error","handleCodeChange","value","handleRunCode","_result$output","_result$ast","engine","MiniJSEngine","result","run","formatTokens","formatEnvironment","message","length","forEach","token","index","type","lexeme","line","env","envText","addEnvironmentToText","indentLevel","indent","repeat","name","variables","Object","entries","enclosing","constructor","interpreter","environmentMonitor","source","tokenizer","tokenize","parser","statements","parse","JSON","stringify","astReplacer","interpret","extractEnvironment","key","undefined","className","children","onRun","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onTabChange","_c","$RefreshReg$"],"sources":["/Users/senzenn/Documents/pbl-compiler/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeEditor from './components/CodeEditor';\nimport OutputPanel from './components/OutputPanel';\nimport Header from './components/Header';\nimport './App.css';\nimport { Tokenizer } from './compiler/tokenizer';\nimport { Parser } from './compiler/parser';\nimport { Interpreter } from './compiler/interpreter';\nimport { EnvironmentMonitor } from './compiler/environment-monitor';\n\nconst defaultCode = `// Example program for the Mini JavaScript Engine\n\n// Variable declarations\nlet x = 10;\nlet y = 5;\n\n// Arithmetic expressions\nlet sum = x + y;\nlet diff = x - y;\nlet product = x * y;\nlet quotient = x / y;\n\n// Logical conditions\nlet isGreater = x > y;\n\n// Conditional statements\nif (isGreater) {\n  // This block should execute\n  sum = sum * 2;\n}\n\n// Variable assignment\nx = sum; \n\n// End of program`;\n\nfunction App() {\n  const [code, setCode] = useState(defaultCode);\n  const [activeTab, setActiveTab] = useState('output');\n  const [results, setResults] = useState({\n    output: '// Run your code to see output',\n    tokens: '// Run your code to see tokens',\n    ast: '// Run your code to see AST',\n    environment: '// Run your code to see environment variables',\n    error: null\n  });\n\n  const handleCodeChange = (value) => {\n    setCode(value);\n  };\n\n  const handleRunCode = () => {\n    try {\n      const engine = new MiniJSEngine();\n      const result = engine.run(code);\n      \n      setResults({\n        output: result.output ?? 'Code executed successfully!',\n        tokens: formatTokens(result.tokens),\n        ast: result.ast ?? 'No AST generated',\n        environment: formatEnvironment(result.environment),\n        error: result.error\n      });\n    } catch (error) {\n      setResults({\n        ...results,\n        output: `System Error: ${error.message}`,\n        error: error.message\n      });\n    }\n  };\n\n  const formatTokens = (tokens) => {\n    if (!tokens || tokens.length === 0) {\n      return 'No tokens generated';\n    }\n    \n    let result = '';\n    tokens.forEach((token, index) => {\n      result += `[${index}] ${token.type}: \"${token.lexeme}\" (Line ${token.line})\\n`;\n    });\n    \n    return result;\n  };\n\n  const formatEnvironment = (env) => {\n    if (!env) {\n      return '// No environment data available';\n    }\n    \n    if (env.error) {\n      return `// Error: ${env.error}`;\n    }\n    \n    let envText = '';\n    \n    // Recursive function to display environment chain\n    function addEnvironmentToText(env, indentLevel = 0) {\n      if (!env) return;\n      \n      const indent = '  '.repeat(indentLevel);\n      envText += `${indent}${env.name}:\\n`;\n      \n      // Add variables\n      const variables = env.variables || {};\n      for (const [name, value] of Object.entries(variables)) {\n        envText += `${indent}  ${name}: ${value}\\n`;\n      }\n      \n      // Process enclosing environment\n      if (env.enclosing) {\n        envText += '\\n';\n        addEnvironmentToText(env.enclosing, indentLevel + 1);\n      }\n    }\n    \n    addEnvironmentToText(env);\n    return envText;\n  };\n\n  // Mini JS Engine class adapted for web use\n  class MiniJSEngine {\n    constructor() {\n      this.interpreter = new Interpreter();\n      this.environmentMonitor = new EnvironmentMonitor(this.interpreter);\n      this.results = {\n        tokens: [],\n        ast: null,\n        output: null,\n        error: null,\n        environment: null\n      };\n    }\n    \n    run(source) {\n      try {\n        // Reset results\n        this.results = {\n          tokens: [],\n          ast: null,\n          output: null,\n          error: null,\n          environment: null\n        };\n        \n        // Tokenization\n        const tokenizer = new Tokenizer(source);\n        const tokens = tokenizer.tokenize();\n        this.results.tokens = tokens;\n        \n        // Parsing\n        const parser = new Parser(tokens);\n        const statements = parser.parse();\n        this.results.ast = JSON.stringify(statements, this.astReplacer, 2);\n        \n        // Interpretation\n        const result = this.interpreter.interpret(statements);\n        this.results.output = result;\n        \n        // Extract environment information\n        this.results.environment = this.environmentMonitor.extractEnvironment();\n        \n        return this.results;\n      } catch (error) {\n        this.results.error = error.message;\n        return this.results;\n      }\n    }\n    \n    // Helper method to handle circular references in AST\n    astReplacer(key, value) {\n      if (key === 'parent' || key === 'previous') {\n        return undefined; // Skip circular references\n      }\n      return value;\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Header onRun={handleRunCode} />\n      <main className=\"app-main\">\n        <CodeEditor code={code} onChange={handleCodeChange} />\n        <OutputPanel\n          results={results}\n          activeTab={activeTab}\n          onTabChange={setActiveTab}\n        />\n      </main>\n      <footer className=\"app-footer\">\n        <p>Mini JavaScript Engine &copy; 2023</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}