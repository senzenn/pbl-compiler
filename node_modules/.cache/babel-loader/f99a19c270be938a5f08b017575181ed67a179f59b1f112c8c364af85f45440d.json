{"ast":null,"code":"/**\n * Environment Monitor - Extracts information from the Environment for GUI display\n */\n\nclass EnvironmentMonitor {\n  constructor(interpreter) {\n    this.interpreter = interpreter;\n  }\n\n  /**\n   * Extract all environment variables for display\n   * @returns {Object} Object containing environment information\n   */\n  extractEnvironment() {\n    if (!this.interpreter || !this.interpreter.environment) {\n      return {\n        error: 'No active environment'\n      };\n    }\n    return this.serializeEnvironment(this.interpreter.environment);\n  }\n\n  /**\n   * Serialize an environment and its enclosing environments\n   * @param {Environment} env The environment to serialize\n   * @param {number} depth Current depth in the environment chain\n   * @returns {Object} Serialized environment data\n   */\n  serializeEnvironment(env, depth = 0) {\n    if (!env) return null;\n    const result = {\n      depth,\n      name: depth === 0 ? 'Global Scope' : `Scope ${depth}`,\n      variables: {},\n      enclosing: null\n    };\n\n    // Extract variables\n    if (env.values && env.values instanceof Map) {\n      for (const [name, value] of env.values.entries()) {\n        result.variables[name] = this.serializeValue(value);\n      }\n    }\n\n    // Process enclosing environment recursively\n    if (env.enclosing) {\n      result.enclosing = this.serializeEnvironment(env.enclosing, depth + 1);\n    }\n    return result;\n  }\n\n  /**\n   * Convert a JavaScript value to a displayable string\n   * @param {any} value The value to serialize\n   * @returns {string} String representation of the value\n   */\n  serializeValue(value) {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        return value.toString();\n      case 'string':\n        return `\"${value}\"`;\n      case 'object':\n        if (Array.isArray(value)) {\n          return `[${value.map(v => this.serializeValue(v)).join(', ')}]`;\n        }\n        return JSON.stringify(value);\n      default:\n        return String(value);\n    }\n  }\n}\nexport { EnvironmentMonitor };","map":{"version":3,"names":["EnvironmentMonitor","constructor","interpreter","extractEnvironment","environment","error","serializeEnvironment","env","depth","result","name","variables","enclosing","values","Map","value","entries","serializeValue","undefined","toString","Array","isArray","map","v","join","JSON","stringify","String"],"sources":["/Users/senzenn/Documents/pbl-compiler/src/compiler/environment-monitor.js"],"sourcesContent":["/**\n * Environment Monitor - Extracts information from the Environment for GUI display\n */\n\nclass EnvironmentMonitor {\n  constructor(interpreter) {\n    this.interpreter = interpreter;\n  }\n  \n  /**\n   * Extract all environment variables for display\n   * @returns {Object} Object containing environment information\n   */\n  extractEnvironment() {\n    if (!this.interpreter || !this.interpreter.environment) {\n      return { error: 'No active environment' };\n    }\n    \n    return this.serializeEnvironment(this.interpreter.environment);\n  }\n  \n  /**\n   * Serialize an environment and its enclosing environments\n   * @param {Environment} env The environment to serialize\n   * @param {number} depth Current depth in the environment chain\n   * @returns {Object} Serialized environment data\n   */\n  serializeEnvironment(env, depth = 0) {\n    if (!env) return null;\n    \n    const result = {\n      depth,\n      name: depth === 0 ? 'Global Scope' : `Scope ${depth}`,\n      variables: {},\n      enclosing: null\n    };\n    \n    // Extract variables\n    if (env.values && env.values instanceof Map) {\n      for (const [name, value] of env.values.entries()) {\n        result.variables[name] = this.serializeValue(value);\n      }\n    }\n    \n    // Process enclosing environment recursively\n    if (env.enclosing) {\n      result.enclosing = this.serializeEnvironment(env.enclosing, depth + 1);\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Convert a JavaScript value to a displayable string\n   * @param {any} value The value to serialize\n   * @returns {string} String representation of the value\n   */\n  serializeValue(value) {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    \n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        return value.toString();\n      case 'string':\n        return `\"${value}\"`;\n      case 'object':\n        if (Array.isArray(value)) {\n          return `[${value.map(v => this.serializeValue(v)).join(', ')}]`;\n        }\n        return JSON.stringify(value);\n      default:\n        return String(value);\n    }\n  }\n}\n\nexport { EnvironmentMonitor }; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;;EAEA;AACF;AACA;AACA;EACEC,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAAC,IAAI,CAACD,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAACE,WAAW,EAAE;MACtD,OAAO;QAAEC,KAAK,EAAE;MAAwB,CAAC;IAC3C;IAEA,OAAO,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACJ,WAAW,CAACE,WAAW,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,oBAAoBA,CAACC,GAAG,EAAEC,KAAK,GAAG,CAAC,EAAE;IACnC,IAAI,CAACD,GAAG,EAAE,OAAO,IAAI;IAErB,MAAME,MAAM,GAAG;MACbD,KAAK;MACLE,IAAI,EAAEF,KAAK,KAAK,CAAC,GAAG,cAAc,GAAG,SAASA,KAAK,EAAE;MACrDG,SAAS,EAAE,CAAC,CAAC;MACbC,SAAS,EAAE;IACb,CAAC;;IAED;IACA,IAAIL,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACM,MAAM,YAAYC,GAAG,EAAE;MAC3C,KAAK,MAAM,CAACJ,IAAI,EAAEK,KAAK,CAAC,IAAIR,GAAG,CAACM,MAAM,CAACG,OAAO,CAAC,CAAC,EAAE;QAChDP,MAAM,CAACE,SAAS,CAACD,IAAI,CAAC,GAAG,IAAI,CAACO,cAAc,CAACF,KAAK,CAAC;MACrD;IACF;;IAEA;IACA,IAAIR,GAAG,CAACK,SAAS,EAAE;MACjBH,MAAM,CAACG,SAAS,GAAG,IAAI,CAACN,oBAAoB,CAACC,GAAG,CAACK,SAAS,EAAEJ,KAAK,GAAG,CAAC,CAAC;IACxE;IAEA,OAAOC,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;EACEQ,cAAcA,CAACF,KAAK,EAAE;IACpB,IAAIA,KAAK,KAAK,IAAI,EAAE,OAAO,MAAM;IACjC,IAAIA,KAAK,KAAKG,SAAS,EAAE,OAAO,WAAW;IAE3C,QAAQ,OAAOH,KAAK;MAClB,KAAK,QAAQ;MACb,KAAK,SAAS;QACZ,OAAOA,KAAK,CAACI,QAAQ,CAAC,CAAC;MACzB,KAAK,QAAQ;QACX,OAAO,IAAIJ,KAAK,GAAG;MACrB,KAAK,QAAQ;QACX,IAAIK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;UACxB,OAAO,IAAIA,KAAK,CAACO,GAAG,CAACC,CAAC,IAAI,IAAI,CAACN,cAAc,CAACM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAAG;QACjE;QACA,OAAOC,IAAI,CAACC,SAAS,CAACX,KAAK,CAAC;MAC9B;QACE,OAAOY,MAAM,CAACZ,KAAK,CAAC;IACxB;EACF;AACF;AAEA,SAASf,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}